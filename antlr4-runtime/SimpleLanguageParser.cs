//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Poc and Personal\GrammarDemo\SimpleLanguage.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class SimpleLanguageParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		OR=1, AND=2, EQ=3, NEQ=4, GT=5, LT=6, GTEQ=7, LTEQ=8, PLUS=9, MINUS=10, 
		MULT=11, DIV=12, MOD=13, POW=14, NOT=15, SCOL=16, ASSIGN=17, OPAR=18, 
		CPAR=19, OBRACE=20, CBRACE=21, TRUE=22, FALSE=23, NIL=24, IF=25, ELSE=26, 
		WHILE=27, LOG=28, ID=29, INT=30, FLOAT=31, STRING=32, COMMENT=33, SPACE=34, 
		OTHER=35;
	public const int
		RULE_parse = 0, RULE_block = 1, RULE_stat = 2, RULE_assignment = 3, RULE_if_stat = 4, 
		RULE_condition_block = 5, RULE_stat_block = 6, RULE_while_stat = 7, RULE_log = 8, 
		RULE_expr = 9, RULE_atom = 10;
	public static readonly string[] ruleNames = {
		"parse", "block", "stat", "assignment", "if_stat", "condition_block", 
		"stat_block", "while_stat", "log", "expr", "atom"
	};

	private static readonly string[] _LiteralNames = {
		null, "'||'", "'&&'", "'=='", "'!='", "'>'", "'<'", "'>='", "'<='", "'+'", 
		"'-'", "'*'", "'/'", "'%'", "'^'", "'!'", "';'", "'='", "'('", "')'", 
		"'{'", "'}'", "'true'", "'false'", "'nil'", "'if'", "'else'", "'while'", 
		"'log'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "OR", "AND", "EQ", "NEQ", "GT", "LT", "GTEQ", "LTEQ", "PLUS", "MINUS", 
		"MULT", "DIV", "MOD", "POW", "NOT", "SCOL", "ASSIGN", "OPAR", "CPAR", 
		"OBRACE", "CBRACE", "TRUE", "FALSE", "NIL", "IF", "ELSE", "WHILE", "LOG", 
		"ID", "INT", "FLOAT", "STRING", "COMMENT", "SPACE", "OTHER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SimpleLanguage.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static SimpleLanguageParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SimpleLanguageParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SimpleLanguageParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ParseContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(SimpleLanguageParser.Eof, 0); }
		public ParseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parse; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleLanguageListener typedListener = listener as ISimpleLanguageListener;
			if (typedListener != null) typedListener.EnterParse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleLanguageListener typedListener = listener as ISimpleLanguageListener;
			if (typedListener != null) typedListener.ExitParse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleLanguageVisitor<TResult> typedVisitor = visitor as ISimpleLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParseContext parse() {
		ParseContext _localctx = new ParseContext(Context, State);
		EnterRule(_localctx, 0, RULE_parse);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 22; block();
			State = 23; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public StatContext[] stat() {
			return GetRuleContexts<StatContext>();
		}
		public StatContext stat(int i) {
			return GetRuleContext<StatContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleLanguageListener typedListener = listener as ISimpleLanguageListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleLanguageListener typedListener = listener as ISimpleLanguageListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleLanguageVisitor<TResult> typedVisitor = visitor as ISimpleLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 2, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 28;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IF) | (1L << WHILE) | (1L << LOG) | (1L << ID) | (1L << OTHER))) != 0)) {
				{
				{
				State = 25; stat();
				}
				}
				State = 30;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatContext : ParserRuleContext {
		public IToken _OTHER;
		public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public If_statContext if_stat() {
			return GetRuleContext<If_statContext>(0);
		}
		public While_statContext while_stat() {
			return GetRuleContext<While_statContext>(0);
		}
		public LogContext log() {
			return GetRuleContext<LogContext>(0);
		}
		public ITerminalNode OTHER() { return GetToken(SimpleLanguageParser.OTHER, 0); }
		public StatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleLanguageListener typedListener = listener as ISimpleLanguageListener;
			if (typedListener != null) typedListener.EnterStat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleLanguageListener typedListener = listener as ISimpleLanguageListener;
			if (typedListener != null) typedListener.ExitStat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleLanguageVisitor<TResult> typedVisitor = visitor as ISimpleLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatContext stat() {
		StatContext _localctx = new StatContext(Context, State);
		EnterRule(_localctx, 4, RULE_stat);
		try {
			State = 37;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 31; assignment();
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 32; if_stat();
				}
				break;
			case WHILE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 33; while_stat();
				}
				break;
			case LOG:
				EnterOuterAlt(_localctx, 4);
				{
				State = 34; log();
				}
				break;
			case OTHER:
				EnterOuterAlt(_localctx, 5);
				{
				State = 35; _localctx._OTHER = Match(OTHER);
				Console.WriteLine("unknown char: " + (_localctx._OTHER!=null?_localctx._OTHER.Text:null));
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(SimpleLanguageParser.ID, 0); }
		public ITerminalNode ASSIGN() { return GetToken(SimpleLanguageParser.ASSIGN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode SCOL() { return GetToken(SimpleLanguageParser.SCOL, 0); }
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleLanguageListener typedListener = listener as ISimpleLanguageListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleLanguageListener typedListener = listener as ISimpleLanguageListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleLanguageVisitor<TResult> typedVisitor = visitor as ISimpleLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 6, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 39; Match(ID);
			State = 40; Match(ASSIGN);
			State = 41; expr(0);
			State = 42; Match(SCOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_statContext : ParserRuleContext {
		public ITerminalNode[] IF() { return GetTokens(SimpleLanguageParser.IF); }
		public ITerminalNode IF(int i) {
			return GetToken(SimpleLanguageParser.IF, i);
		}
		public Condition_blockContext[] condition_block() {
			return GetRuleContexts<Condition_blockContext>();
		}
		public Condition_blockContext condition_block(int i) {
			return GetRuleContext<Condition_blockContext>(i);
		}
		public ITerminalNode[] ELSE() { return GetTokens(SimpleLanguageParser.ELSE); }
		public ITerminalNode ELSE(int i) {
			return GetToken(SimpleLanguageParser.ELSE, i);
		}
		public Stat_blockContext stat_block() {
			return GetRuleContext<Stat_blockContext>(0);
		}
		public If_statContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_stat; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleLanguageListener typedListener = listener as ISimpleLanguageListener;
			if (typedListener != null) typedListener.EnterIf_stat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleLanguageListener typedListener = listener as ISimpleLanguageListener;
			if (typedListener != null) typedListener.ExitIf_stat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleLanguageVisitor<TResult> typedVisitor = visitor as ISimpleLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_stat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_statContext if_stat() {
		If_statContext _localctx = new If_statContext(Context, State);
		EnterRule(_localctx, 8, RULE_if_stat);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 44; Match(IF);
			State = 45; condition_block();
			State = 51;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 46; Match(ELSE);
					State = 47; Match(IF);
					State = 48; condition_block();
					}
					} 
				}
				State = 53;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			State = 56;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				{
				State = 54; Match(ELSE);
				State = 55; stat_block();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Condition_blockContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Stat_blockContext stat_block() {
			return GetRuleContext<Stat_blockContext>(0);
		}
		public Condition_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleLanguageListener typedListener = listener as ISimpleLanguageListener;
			if (typedListener != null) typedListener.EnterCondition_block(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleLanguageListener typedListener = listener as ISimpleLanguageListener;
			if (typedListener != null) typedListener.ExitCondition_block(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleLanguageVisitor<TResult> typedVisitor = visitor as ISimpleLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Condition_blockContext condition_block() {
		Condition_blockContext _localctx = new Condition_blockContext(Context, State);
		EnterRule(_localctx, 10, RULE_condition_block);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 58; expr(0);
			State = 59; stat_block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_blockContext : ParserRuleContext {
		public ITerminalNode OBRACE() { return GetToken(SimpleLanguageParser.OBRACE, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode CBRACE() { return GetToken(SimpleLanguageParser.CBRACE, 0); }
		public StatContext stat() {
			return GetRuleContext<StatContext>(0);
		}
		public Stat_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleLanguageListener typedListener = listener as ISimpleLanguageListener;
			if (typedListener != null) typedListener.EnterStat_block(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleLanguageListener typedListener = listener as ISimpleLanguageListener;
			if (typedListener != null) typedListener.ExitStat_block(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleLanguageVisitor<TResult> typedVisitor = visitor as ISimpleLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_blockContext stat_block() {
		Stat_blockContext _localctx = new Stat_blockContext(Context, State);
		EnterRule(_localctx, 12, RULE_stat_block);
		try {
			State = 66;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OBRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 61; Match(OBRACE);
				State = 62; block();
				State = 63; Match(CBRACE);
				}
				break;
			case IF:
			case WHILE:
			case LOG:
			case ID:
			case OTHER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 65; stat();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class While_statContext : ParserRuleContext {
		public ITerminalNode WHILE() { return GetToken(SimpleLanguageParser.WHILE, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Stat_blockContext stat_block() {
			return GetRuleContext<Stat_blockContext>(0);
		}
		public While_statContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while_stat; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleLanguageListener typedListener = listener as ISimpleLanguageListener;
			if (typedListener != null) typedListener.EnterWhile_stat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleLanguageListener typedListener = listener as ISimpleLanguageListener;
			if (typedListener != null) typedListener.ExitWhile_stat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleLanguageVisitor<TResult> typedVisitor = visitor as ISimpleLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile_stat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public While_statContext while_stat() {
		While_statContext _localctx = new While_statContext(Context, State);
		EnterRule(_localctx, 14, RULE_while_stat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 68; Match(WHILE);
			State = 69; expr(0);
			State = 70; stat_block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogContext : ParserRuleContext {
		public ITerminalNode LOG() { return GetToken(SimpleLanguageParser.LOG, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode SCOL() { return GetToken(SimpleLanguageParser.SCOL, 0); }
		public LogContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_log; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleLanguageListener typedListener = listener as ISimpleLanguageListener;
			if (typedListener != null) typedListener.EnterLog(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleLanguageListener typedListener = listener as ISimpleLanguageListener;
			if (typedListener != null) typedListener.ExitLog(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleLanguageVisitor<TResult> typedVisitor = visitor as ISimpleLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLog(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogContext log() {
		LogContext _localctx = new LogContext(Context, State);
		EnterRule(_localctx, 16, RULE_log);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 72; Match(LOG);
			State = 73; expr(0);
			State = 74; Match(SCOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NotExprContext : ExprContext {
		public ITerminalNode NOT() { return GetToken(SimpleLanguageParser.NOT, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public NotExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleLanguageListener typedListener = listener as ISimpleLanguageListener;
			if (typedListener != null) typedListener.EnterNotExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleLanguageListener typedListener = listener as ISimpleLanguageListener;
			if (typedListener != null) typedListener.ExitNotExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleLanguageVisitor<TResult> typedVisitor = visitor as ISimpleLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryMinusExprContext : ExprContext {
		public ITerminalNode MINUS() { return GetToken(SimpleLanguageParser.MINUS, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public UnaryMinusExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleLanguageListener typedListener = listener as ISimpleLanguageListener;
			if (typedListener != null) typedListener.EnterUnaryMinusExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleLanguageListener typedListener = listener as ISimpleLanguageListener;
			if (typedListener != null) typedListener.ExitUnaryMinusExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleLanguageVisitor<TResult> typedVisitor = visitor as ISimpleLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryMinusExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicationExprContext : ExprContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode MULT() { return GetToken(SimpleLanguageParser.MULT, 0); }
		public ITerminalNode DIV() { return GetToken(SimpleLanguageParser.DIV, 0); }
		public ITerminalNode MOD() { return GetToken(SimpleLanguageParser.MOD, 0); }
		public MultiplicationExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleLanguageListener typedListener = listener as ISimpleLanguageListener;
			if (typedListener != null) typedListener.EnterMultiplicationExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleLanguageListener typedListener = listener as ISimpleLanguageListener;
			if (typedListener != null) typedListener.ExitMultiplicationExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleLanguageVisitor<TResult> typedVisitor = visitor as ISimpleLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicationExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AtomExprContext : ExprContext {
		public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public AtomExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleLanguageListener typedListener = listener as ISimpleLanguageListener;
			if (typedListener != null) typedListener.EnterAtomExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleLanguageListener typedListener = listener as ISimpleLanguageListener;
			if (typedListener != null) typedListener.ExitAtomExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleLanguageVisitor<TResult> typedVisitor = visitor as ISimpleLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrExprContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode OR() { return GetToken(SimpleLanguageParser.OR, 0); }
		public OrExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleLanguageListener typedListener = listener as ISimpleLanguageListener;
			if (typedListener != null) typedListener.EnterOrExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleLanguageListener typedListener = listener as ISimpleLanguageListener;
			if (typedListener != null) typedListener.ExitOrExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleLanguageVisitor<TResult> typedVisitor = visitor as ISimpleLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditiveExprContext : ExprContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode PLUS() { return GetToken(SimpleLanguageParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(SimpleLanguageParser.MINUS, 0); }
		public AdditiveExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleLanguageListener typedListener = listener as ISimpleLanguageListener;
			if (typedListener != null) typedListener.EnterAdditiveExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleLanguageListener typedListener = listener as ISimpleLanguageListener;
			if (typedListener != null) typedListener.ExitAdditiveExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleLanguageVisitor<TResult> typedVisitor = visitor as ISimpleLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PowExprContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode POW() { return GetToken(SimpleLanguageParser.POW, 0); }
		public PowExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleLanguageListener typedListener = listener as ISimpleLanguageListener;
			if (typedListener != null) typedListener.EnterPowExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleLanguageListener typedListener = listener as ISimpleLanguageListener;
			if (typedListener != null) typedListener.ExitPowExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleLanguageVisitor<TResult> typedVisitor = visitor as ISimpleLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPowExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RelationalExprContext : ExprContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode LTEQ() { return GetToken(SimpleLanguageParser.LTEQ, 0); }
		public ITerminalNode GTEQ() { return GetToken(SimpleLanguageParser.GTEQ, 0); }
		public ITerminalNode LT() { return GetToken(SimpleLanguageParser.LT, 0); }
		public ITerminalNode GT() { return GetToken(SimpleLanguageParser.GT, 0); }
		public RelationalExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleLanguageListener typedListener = listener as ISimpleLanguageListener;
			if (typedListener != null) typedListener.EnterRelationalExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleLanguageListener typedListener = listener as ISimpleLanguageListener;
			if (typedListener != null) typedListener.ExitRelationalExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleLanguageVisitor<TResult> typedVisitor = visitor as ISimpleLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualityExprContext : ExprContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode EQ() { return GetToken(SimpleLanguageParser.EQ, 0); }
		public ITerminalNode NEQ() { return GetToken(SimpleLanguageParser.NEQ, 0); }
		public EqualityExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleLanguageListener typedListener = listener as ISimpleLanguageListener;
			if (typedListener != null) typedListener.EnterEqualityExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleLanguageListener typedListener = listener as ISimpleLanguageListener;
			if (typedListener != null) typedListener.ExitEqualityExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleLanguageVisitor<TResult> typedVisitor = visitor as ISimpleLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndExprContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode AND() { return GetToken(SimpleLanguageParser.AND, 0); }
		public AndExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleLanguageListener typedListener = listener as ISimpleLanguageListener;
			if (typedListener != null) typedListener.EnterAndExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleLanguageListener typedListener = listener as ISimpleLanguageListener;
			if (typedListener != null) typedListener.ExitAndExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleLanguageVisitor<TResult> typedVisitor = visitor as ISimpleLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 18;
		EnterRecursionRule(_localctx, 18, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 82;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MINUS:
				{
				_localctx = new UnaryMinusExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 77; Match(MINUS);
				State = 78; expr(9);
				}
				break;
			case NOT:
				{
				_localctx = new NotExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 79; Match(NOT);
				State = 80; expr(8);
				}
				break;
			case OPAR:
			case TRUE:
			case FALSE:
			case NIL:
			case ID:
			case INT:
			case FLOAT:
			case STRING:
				{
				_localctx = new AtomExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 81; atom();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 107;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 105;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
					case 1:
						{
						_localctx = new PowExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 84;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 85; Match(POW);
						State = 86; expr(11);
						}
						break;
					case 2:
						{
						_localctx = new MultiplicationExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 87;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 88;
						((MultiplicationExprContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MULT) | (1L << DIV) | (1L << MOD))) != 0)) ) {
							((MultiplicationExprContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 89; expr(8);
						}
						break;
					case 3:
						{
						_localctx = new AdditiveExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 90;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 91;
						((AdditiveExprContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
							((AdditiveExprContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 92; expr(7);
						}
						break;
					case 4:
						{
						_localctx = new RelationalExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 93;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 94;
						((RelationalExprContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GT) | (1L << LT) | (1L << GTEQ) | (1L << LTEQ))) != 0)) ) {
							((RelationalExprContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 95; expr(6);
						}
						break;
					case 5:
						{
						_localctx = new EqualityExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 96;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 97;
						((EqualityExprContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==EQ || _la==NEQ) ) {
							((EqualityExprContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 98; expr(5);
						}
						break;
					case 6:
						{
						_localctx = new AndExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 99;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 100; Match(AND);
						State = 101; expr(4);
						}
						break;
					case 7:
						{
						_localctx = new OrExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 102;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 103; Match(OR);
						State = 104; expr(3);
						}
						break;
					}
					} 
				}
				State = 109;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
	 
		public AtomContext() { }
		public virtual void CopyFrom(AtomContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ParExprContext : AtomContext {
		public ITerminalNode OPAR() { return GetToken(SimpleLanguageParser.OPAR, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode CPAR() { return GetToken(SimpleLanguageParser.CPAR, 0); }
		public ParExprContext(AtomContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleLanguageListener typedListener = listener as ISimpleLanguageListener;
			if (typedListener != null) typedListener.EnterParExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleLanguageListener typedListener = listener as ISimpleLanguageListener;
			if (typedListener != null) typedListener.ExitParExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleLanguageVisitor<TResult> typedVisitor = visitor as ISimpleLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanAtomContext : AtomContext {
		public ITerminalNode TRUE() { return GetToken(SimpleLanguageParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(SimpleLanguageParser.FALSE, 0); }
		public BooleanAtomContext(AtomContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleLanguageListener typedListener = listener as ISimpleLanguageListener;
			if (typedListener != null) typedListener.EnterBooleanAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleLanguageListener typedListener = listener as ISimpleLanguageListener;
			if (typedListener != null) typedListener.ExitBooleanAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleLanguageVisitor<TResult> typedVisitor = visitor as ISimpleLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdAtomContext : AtomContext {
		public ITerminalNode ID() { return GetToken(SimpleLanguageParser.ID, 0); }
		public IdAtomContext(AtomContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleLanguageListener typedListener = listener as ISimpleLanguageListener;
			if (typedListener != null) typedListener.EnterIdAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleLanguageListener typedListener = listener as ISimpleLanguageListener;
			if (typedListener != null) typedListener.ExitIdAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleLanguageVisitor<TResult> typedVisitor = visitor as ISimpleLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringAtomContext : AtomContext {
		public ITerminalNode STRING() { return GetToken(SimpleLanguageParser.STRING, 0); }
		public StringAtomContext(AtomContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleLanguageListener typedListener = listener as ISimpleLanguageListener;
			if (typedListener != null) typedListener.EnterStringAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleLanguageListener typedListener = listener as ISimpleLanguageListener;
			if (typedListener != null) typedListener.ExitStringAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleLanguageVisitor<TResult> typedVisitor = visitor as ISimpleLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NilAtomContext : AtomContext {
		public ITerminalNode NIL() { return GetToken(SimpleLanguageParser.NIL, 0); }
		public NilAtomContext(AtomContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleLanguageListener typedListener = listener as ISimpleLanguageListener;
			if (typedListener != null) typedListener.EnterNilAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleLanguageListener typedListener = listener as ISimpleLanguageListener;
			if (typedListener != null) typedListener.ExitNilAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleLanguageVisitor<TResult> typedVisitor = visitor as ISimpleLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNilAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumberAtomContext : AtomContext {
		public ITerminalNode INT() { return GetToken(SimpleLanguageParser.INT, 0); }
		public ITerminalNode FLOAT() { return GetToken(SimpleLanguageParser.FLOAT, 0); }
		public NumberAtomContext(AtomContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISimpleLanguageListener typedListener = listener as ISimpleLanguageListener;
			if (typedListener != null) typedListener.EnterNumberAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISimpleLanguageListener typedListener = listener as ISimpleLanguageListener;
			if (typedListener != null) typedListener.ExitNumberAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISimpleLanguageVisitor<TResult> typedVisitor = visitor as ISimpleLanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 20, RULE_atom);
		int _la;
		try {
			State = 119;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPAR:
				_localctx = new ParExprContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 110; Match(OPAR);
				State = 111; expr(0);
				State = 112; Match(CPAR);
				}
				break;
			case INT:
			case FLOAT:
				_localctx = new NumberAtomContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 114;
				_la = TokenStream.LA(1);
				if ( !(_la==INT || _la==FLOAT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case TRUE:
			case FALSE:
				_localctx = new BooleanAtomContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 115;
				_la = TokenStream.LA(1);
				if ( !(_la==TRUE || _la==FALSE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case ID:
				_localctx = new IdAtomContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 116; Match(ID);
				}
				break;
			case STRING:
				_localctx = new StringAtomContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 117; Match(STRING);
				}
				break;
			case NIL:
				_localctx = new NilAtomContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 118; Match(NIL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 9: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 10);
		case 1: return Precpred(Context, 7);
		case 2: return Precpred(Context, 6);
		case 3: return Precpred(Context, 5);
		case 4: return Precpred(Context, 4);
		case 5: return Precpred(Context, 3);
		case 6: return Precpred(Context, 2);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '%', '|', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', '\t', 
		'\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', '\x6', 
		'\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', '\x4', 
		'\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', '\x4', 
		'\f', '\t', '\f', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', 
		'\a', '\x3', '\x1D', '\n', '\x3', '\f', '\x3', '\xE', '\x3', ' ', '\v', 
		'\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x5', '\x4', '(', '\n', '\x4', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', '\x34', 
		'\n', '\x6', '\f', '\x6', '\xE', '\x6', '\x37', '\v', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x5', '\x6', ';', '\n', '\x6', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x5', '\b', '\x45', '\n', '\b', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x5', '\v', 'U', '\n', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\a', '\v', 'l', '\n', '\v', '\f', '\v', '\xE', '\v', 
		'o', '\v', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', 
		'z', '\n', '\f', '\x3', '\f', '\x2', '\x3', '\x14', '\r', '\x2', '\x4', 
		'\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x2', 
		'\b', '\x3', '\x2', '\r', '\xF', '\x3', '\x2', '\v', '\f', '\x3', '\x2', 
		'\a', '\n', '\x3', '\x2', '\x5', '\x6', '\x3', '\x2', ' ', '!', '\x3', 
		'\x2', '\x18', '\x19', '\x2', '\x86', '\x2', '\x18', '\x3', '\x2', '\x2', 
		'\x2', '\x4', '\x1E', '\x3', '\x2', '\x2', '\x2', '\x6', '\'', '\x3', 
		'\x2', '\x2', '\x2', '\b', ')', '\x3', '\x2', '\x2', '\x2', '\n', '.', 
		'\x3', '\x2', '\x2', '\x2', '\f', '<', '\x3', '\x2', '\x2', '\x2', '\xE', 
		'\x44', '\x3', '\x2', '\x2', '\x2', '\x10', '\x46', '\x3', '\x2', '\x2', 
		'\x2', '\x12', 'J', '\x3', '\x2', '\x2', '\x2', '\x14', 'T', '\x3', '\x2', 
		'\x2', '\x2', '\x16', 'y', '\x3', '\x2', '\x2', '\x2', '\x18', '\x19', 
		'\x5', '\x4', '\x3', '\x2', '\x19', '\x1A', '\a', '\x2', '\x2', '\x3', 
		'\x1A', '\x3', '\x3', '\x2', '\x2', '\x2', '\x1B', '\x1D', '\x5', '\x6', 
		'\x4', '\x2', '\x1C', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x1D', ' ', 
		'\x3', '\x2', '\x2', '\x2', '\x1E', '\x1C', '\x3', '\x2', '\x2', '\x2', 
		'\x1E', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x1F', '\x5', '\x3', '\x2', 
		'\x2', '\x2', ' ', '\x1E', '\x3', '\x2', '\x2', '\x2', '!', '(', '\x5', 
		'\b', '\x5', '\x2', '\"', '(', '\x5', '\n', '\x6', '\x2', '#', '(', '\x5', 
		'\x10', '\t', '\x2', '$', '(', '\x5', '\x12', '\n', '\x2', '%', '&', '\a', 
		'%', '\x2', '\x2', '&', '(', '\b', '\x4', '\x1', '\x2', '\'', '!', '\x3', 
		'\x2', '\x2', '\x2', '\'', '\"', '\x3', '\x2', '\x2', '\x2', '\'', '#', 
		'\x3', '\x2', '\x2', '\x2', '\'', '$', '\x3', '\x2', '\x2', '\x2', '\'', 
		'%', '\x3', '\x2', '\x2', '\x2', '(', '\a', '\x3', '\x2', '\x2', '\x2', 
		')', '*', '\a', '\x1F', '\x2', '\x2', '*', '+', '\a', '\x13', '\x2', '\x2', 
		'+', ',', '\x5', '\x14', '\v', '\x2', ',', '-', '\a', '\x12', '\x2', '\x2', 
		'-', '\t', '\x3', '\x2', '\x2', '\x2', '.', '/', '\a', '\x1B', '\x2', 
		'\x2', '/', '\x35', '\x5', '\f', '\a', '\x2', '\x30', '\x31', '\a', '\x1C', 
		'\x2', '\x2', '\x31', '\x32', '\a', '\x1B', '\x2', '\x2', '\x32', '\x34', 
		'\x5', '\f', '\a', '\x2', '\x33', '\x30', '\x3', '\x2', '\x2', '\x2', 
		'\x34', '\x37', '\x3', '\x2', '\x2', '\x2', '\x35', '\x33', '\x3', '\x2', 
		'\x2', '\x2', '\x35', '\x36', '\x3', '\x2', '\x2', '\x2', '\x36', ':', 
		'\x3', '\x2', '\x2', '\x2', '\x37', '\x35', '\x3', '\x2', '\x2', '\x2', 
		'\x38', '\x39', '\a', '\x1C', '\x2', '\x2', '\x39', ';', '\x5', '\xE', 
		'\b', '\x2', ':', '\x38', '\x3', '\x2', '\x2', '\x2', ':', ';', '\x3', 
		'\x2', '\x2', '\x2', ';', '\v', '\x3', '\x2', '\x2', '\x2', '<', '=', 
		'\x5', '\x14', '\v', '\x2', '=', '>', '\x5', '\xE', '\b', '\x2', '>', 
		'\r', '\x3', '\x2', '\x2', '\x2', '?', '@', '\a', '\x16', '\x2', '\x2', 
		'@', '\x41', '\x5', '\x4', '\x3', '\x2', '\x41', '\x42', '\a', '\x17', 
		'\x2', '\x2', '\x42', '\x45', '\x3', '\x2', '\x2', '\x2', '\x43', '\x45', 
		'\x5', '\x6', '\x4', '\x2', '\x44', '?', '\x3', '\x2', '\x2', '\x2', '\x44', 
		'\x43', '\x3', '\x2', '\x2', '\x2', '\x45', '\xF', '\x3', '\x2', '\x2', 
		'\x2', '\x46', 'G', '\a', '\x1D', '\x2', '\x2', 'G', 'H', '\x5', '\x14', 
		'\v', '\x2', 'H', 'I', '\x5', '\xE', '\b', '\x2', 'I', '\x11', '\x3', 
		'\x2', '\x2', '\x2', 'J', 'K', '\a', '\x1E', '\x2', '\x2', 'K', 'L', '\x5', 
		'\x14', '\v', '\x2', 'L', 'M', '\a', '\x12', '\x2', '\x2', 'M', '\x13', 
		'\x3', '\x2', '\x2', '\x2', 'N', 'O', '\b', '\v', '\x1', '\x2', 'O', 'P', 
		'\a', '\f', '\x2', '\x2', 'P', 'U', '\x5', '\x14', '\v', '\v', 'Q', 'R', 
		'\a', '\x11', '\x2', '\x2', 'R', 'U', '\x5', '\x14', '\v', '\n', 'S', 
		'U', '\x5', '\x16', '\f', '\x2', 'T', 'N', '\x3', '\x2', '\x2', '\x2', 
		'T', 'Q', '\x3', '\x2', '\x2', '\x2', 'T', 'S', '\x3', '\x2', '\x2', '\x2', 
		'U', 'm', '\x3', '\x2', '\x2', '\x2', 'V', 'W', '\f', '\f', '\x2', '\x2', 
		'W', 'X', '\a', '\x10', '\x2', '\x2', 'X', 'l', '\x5', '\x14', '\v', '\r', 
		'Y', 'Z', '\f', '\t', '\x2', '\x2', 'Z', '[', '\t', '\x2', '\x2', '\x2', 
		'[', 'l', '\x5', '\x14', '\v', '\n', '\\', ']', '\f', '\b', '\x2', '\x2', 
		']', '^', '\t', '\x3', '\x2', '\x2', '^', 'l', '\x5', '\x14', '\v', '\t', 
		'_', '`', '\f', '\a', '\x2', '\x2', '`', '\x61', '\t', '\x4', '\x2', '\x2', 
		'\x61', 'l', '\x5', '\x14', '\v', '\b', '\x62', '\x63', '\f', '\x6', '\x2', 
		'\x2', '\x63', '\x64', '\t', '\x5', '\x2', '\x2', '\x64', 'l', '\x5', 
		'\x14', '\v', '\a', '\x65', '\x66', '\f', '\x5', '\x2', '\x2', '\x66', 
		'g', '\a', '\x4', '\x2', '\x2', 'g', 'l', '\x5', '\x14', '\v', '\x6', 
		'h', 'i', '\f', '\x4', '\x2', '\x2', 'i', 'j', '\a', '\x3', '\x2', '\x2', 
		'j', 'l', '\x5', '\x14', '\v', '\x5', 'k', 'V', '\x3', '\x2', '\x2', '\x2', 
		'k', 'Y', '\x3', '\x2', '\x2', '\x2', 'k', '\\', '\x3', '\x2', '\x2', 
		'\x2', 'k', '_', '\x3', '\x2', '\x2', '\x2', 'k', '\x62', '\x3', '\x2', 
		'\x2', '\x2', 'k', '\x65', '\x3', '\x2', '\x2', '\x2', 'k', 'h', '\x3', 
		'\x2', '\x2', '\x2', 'l', 'o', '\x3', '\x2', '\x2', '\x2', 'm', 'k', '\x3', 
		'\x2', '\x2', '\x2', 'm', 'n', '\x3', '\x2', '\x2', '\x2', 'n', '\x15', 
		'\x3', '\x2', '\x2', '\x2', 'o', 'm', '\x3', '\x2', '\x2', '\x2', 'p', 
		'q', '\a', '\x14', '\x2', '\x2', 'q', 'r', '\x5', '\x14', '\v', '\x2', 
		'r', 's', '\a', '\x15', '\x2', '\x2', 's', 'z', '\x3', '\x2', '\x2', '\x2', 
		't', 'z', '\t', '\x6', '\x2', '\x2', 'u', 'z', '\t', '\a', '\x2', '\x2', 
		'v', 'z', '\a', '\x1F', '\x2', '\x2', 'w', 'z', '\a', '\"', '\x2', '\x2', 
		'x', 'z', '\a', '\x1A', '\x2', '\x2', 'y', 'p', '\x3', '\x2', '\x2', '\x2', 
		'y', 't', '\x3', '\x2', '\x2', '\x2', 'y', 'u', '\x3', '\x2', '\x2', '\x2', 
		'y', 'v', '\x3', '\x2', '\x2', '\x2', 'y', 'w', '\x3', '\x2', '\x2', '\x2', 
		'y', 'x', '\x3', '\x2', '\x2', '\x2', 'z', '\x17', '\x3', '\x2', '\x2', 
		'\x2', '\v', '\x1E', '\'', '\x35', ':', '\x44', 'T', 'k', 'm', 'y',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
